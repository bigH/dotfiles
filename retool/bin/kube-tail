#!/usr/bin/env bash

source "$DOT_FILES_DIR/sh_utils.sh"

if [ "$#" -ne 1 ]; then
  log_error 'this script requires exactly one param. e.g. kube-tail prod-pri'
  exit 1
fi

CLUSTER="$1"

verify-kube-cluster() {
  if ! [ "$(kubectl config get-contexts -o name | grep -F "$1")" = "$1" ]; then
    log_error "cannot find context '$1'; try running \`connect-to\` to configure the cluster locally"
    exit 1
  fi
}

verify-kube-cluster "$CLUSTER-main"
verify-kube-cluster "$CLUSTER-dbconnector"
verify-kube-cluster "$CLUSTER-services"

echo
echo "${RED}${BOLD}Tailing${NORMAL} '${MAGENTA}${BOLD}$CLUSTER-*${NORMAL}' in resource group '${CYAN}${BOLD}$ENVIRONMENT${NORMAL}'"
echo

EVENT_FIFO="$(mktemp)"
rm -rf "$EVENT_FIFO"
mkfifo "$EVENT_FIFO"

KILL_COMMAND='kill'

kube-events() {
  kubectl get events \
    --all-namespaces \
    --sort-by=".metadata.creationTimestamp" \
    --watch "--context=$1" >> "$EVENT_FIFO" 2>&1 &

  KILL_COMMAND="$KILL_COMMAND $!"
}

kube-events "$CLUSTER-main"
kube-events "$CLUSTER-dbconnector"
kube-events "$CLUSTER-services"

CLEANED_UP="no"

cleanup-kube-commands() {
  if [ "$CLEANED_UP" = "no" ]; then
    log_info "got signal: $1"
    log_info "running: $KILL_COMMAND"
    eval "$KILL_COMMAND"
    rm -rf "$EVENT_FIFO"
    CLEANED_UP="yes"
  fi
}

trap "cleanup-kube-commands EXIT" EXIT
trap "cleanup-kube-commands INT" INT
trap "cleanup-kube-commands TERM" TERM

command cat "$EVENT_FIFO"
