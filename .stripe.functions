# watch_build
print_build() {
  PS="stripe-internal/pay-server"
  HEAD="$(git branch-name)"

  REF="${1:-$HEAD}"
  REPO="${2:-$PS}"

  pay ci:status --ref $REF --repo $REPO 2>&1 | grep -v typer-dev | grep -v yard
}

# watch_build
watch_build() {
  PS="stripe-internal/pay-server"
  HEAD="$(git branch-name)"

  REF="${1:-$HEAD}"
  REPO="${2:-$PS}"

  watch -n 20 "pay ci:status --ref $REF --repo $REPO 2>&1 | grep -v typer-dev | grep -v yard"
  print_build $REF $REPO
}

# build_status
build_status() {
  PS="stripe-internal/pay-server"
  HEAD="$(git branch-name)"

  REF="${1:-$HEAD}"
  REPO="${2:-$PS}"

  STATUS_OUTPUT=`pay ci:status --ref $REF --repo $REPO 2>&1 | grep -v typer-dev | grep -v yard`
  STATUS_LINE=`echo $STATUS_OUTPUT | cut -d'|' -f3 | grep -v 'Status' | grep -v '^+' | xargs -n1 echo`
  SUMMARY="${YELLOW} ??? ${NORMAL}"
  if [[ "${STATUS_LINE}" == *"FAILED"* ]]; then
    SUMMARY="${RED}FAILED${NORMAL}"
    echo "$1 -- $SUMMARY"
    FAILEDS=`echo $STATUS_OUTPUT | grep FAILED`
    paste -d ' : ' <(echo $FAILEDS | cut -d '|' -f2) <(echo $FAILEDS | cut -d '|' -f5)
    echo ""
  elif [[ "${STATUS_LINE}" == *"STARTED"* ]]; then
    SUMMARY="${BOLD} ... ${NORMAL}"
    echo "$1 -- $SUMMARY"
  elif [[ "${STATUS_LINE}" == *"INITIALIZED"* ]]; then
    SUMMARY="${BOLD} ... ${NORMAL}"
    echo "$1 -- $SUMMARY"
  else
    SUMMARY="${GREEN}PASSED${NORMAL}"
    echo "$1 -- $SUMMARY"
  fi
}

# latest_masters - pay-server only
latest_masters() {
  PS_ALT_DIR="$HOME/stripe/pay-server-alt"
  PS="stripe-internal/pay-server"
  (
    cd $PS_ALT_DIR
    git checkout master --quiet
    git pull --quiet
    REVS=$(git rev-list -25 HEAD)
    while read -r SHA; do
      build_status $SHA $PS
    done <<< "$REVS"
  )
}

# latest_masters - pay-server only
watch_master() {
  while true; do
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
    latest_masters
    sleep 60
  done
}

