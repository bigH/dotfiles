#!/bin/bash

# jj - list autojump directories
jj() {
  autojump -s
}

# portcheck - check if a port is available
portcheck () {
  if [ -z "$1" ]
  then
    echo "ERROR: specify port number."
  else
    re='^[0-9]+$'
    if ! [[ $1 =~ $re ]] ; then
      echo "ERROR: argument must be a port number."
    else
      lsof -n -i4TCP:$1 | grep LISTEN
    fi
  fi
}

# TODO - this doesn't work - 2 commands `bcip` and `bip`
# bip - install (one or multiple) selected application(s)
# (mnemonic [B]rew [I]nstall [P]lugin)
bip() {
  local apps casks targets
  apps=$(brew search | awk '{print "\x1b[31;1mbrew\x1b[m " $1}') &&
  casks=$(brew search --casks 2>/dev/null | awk '{print "\x1b[34;1mcask\x1b[m " $1}') &&
  targets=$(
    (echo "$apps"; echo "$casks") |
    fzf --ansi -m -d " " -n 2 --preview="echo $(echo {} | awk 'if ($1 == "brew") print "brew info $2"; else print "brew cask info $2"')"
  ) &&
  echo brew install $(echo $targets | cut -d ' ' -f2-)
}

# first_line [file]
first_line() {
  head -n 1
}

# last_line [file]
last_line() {
  tail -n 1
}

# lines [from] [to] - for piping only
line() {
  lines $1 $1
}

# line [number] - for piping only
lines() {
  head -n $2 | tail -n +$1
}

# numbers - for piping only
numbers() {
  cat -n -
}

# shuf - for piping only
shuf() {
  perl -MList::Util=shuffle -e 'print shuffle<STDIN>'
}

# every
every () {
  if [ -z "$1" ]
  then
    echo 'ERROR: specify the `n` in `nth`.'
  else
    re='^[0-9]+$'
    if ! [[ $1 =~ $re ]] ; then
      echo 'ERROR: argument must be a number.'
    else
      NUM=$1
      shift
      if [ "$#" -eq 0 ]; then
        perl -ne 'print ((0 == $. % '"$NUM"') ? $_ : "")'
      else
        while [ "$#" -ne 0 ]; do
          perl -ne 'print ((0 == $. % '"$NUM"') ? $_ : "")' $1
          shift
        done
      fi
    fi
  fi
}

# status
status() {
  if [ -d .git ]; then
    g st
  else
    ll
  fi
}

# horizontal rule [hr]
er() {
  echo ""
  echo "$@"
  $@
}

# horizontal rule [hr]
hr() {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

# join lines ito one
join-lines() {
  SEP=${1:- }
  paste -s -d"$SEP" -
}

# status represents if `git` commands will work
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

