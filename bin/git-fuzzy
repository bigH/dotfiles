#!/usr/bin/env bash

export LIB_DIR="$DOT_FILES_DIR/bin/git-fuzzy-lib"

# TODO turn off (or not...) and expose
# shellcheck disable=2034
export GF_DEBUG_MODE="YES"
# shellcheck disable=2034
export GF_COMMAND_DEBUG_MODE="YES"
# shellcheck disable=2034
export GF_COMMAND_LOG_OUTPUT="YES"
# shellcheck disable=2034
export GF_INTERNAL_COMMAND_DEBUG_MODE="YES"

# TODO: Fix this highlight default
# used for highlighting search terms in diff output
export GREP_COLOR='1;30;48;5;15'

# shellcheck disable=2034
export GF_PREFILL_QUERY=""

# -----------------------------------------
# NB: none of these files source anything
# expectation is to source everything here
. "$LIB_DIR/utils.sh"

. "$LIB_DIR/debug.sh"
. "$LIB_DIR/core.sh"

. "$LIB_DIR/modules/main.sh"

. "$LIB_DIR/modules/branch.sh"
. "$LIB_DIR/modules/diff-direct.sh"
. "$LIB_DIR/modules/diff.sh"
. "$LIB_DIR/modules/log.sh"
. "$LIB_DIR/modules/logdiff.sh"
. "$LIB_DIR/modules/reflog.sh"
. "$LIB_DIR/modules/reflogdiff.sh"
. "$LIB_DIR/modules/status.sh"

# NB: these are never going to appear in the menu
. "$LIB_DIR/modules/helpers.sh"
# -----------------------------------------

if ! type git >/dev/null 2>&1; then
  # shellcheck disable=2016
  gf_log_error '`git` not found; it is required for `git fuzzy` to work.'
  exit 1
fi

if ! type fzf >/dev/null 2>&1; then
  # shellcheck disable=2016
  gf_log_error '`fzf` not found; it is required for `git fuzzy` to work.'
  exit 1
fi

# shellcheck disable=2016
if [ -z "${HUB_AVAILABLE+x}" ]; then
  if type hub >/dev/null 2>&1; then
    export HUB_AVAILABLE="YES"
    gf_log_debug '`hub` found, enabling GitHub support.'
  else
    export HUB_AVAILABLE=""
    gf_log_debug '`hub` not found, enabling GitHub support.'
  fi
fi

gf_run() {
  COMMAND="$1"
  shift
  if [ "$COMMAND" = 'helper' ]; then
    SUB_COMMAND="$1"
    shift
    FUNC="gf_${COMMAND}_${SUB_COMMAND}"
    PARAMETERS_QUOTED="$(quote_params "$@")"
    if type "$FUNC" >/dev/null 2>&1; then
      gf_log_internal "$FUNC" "$@"
      eval "$FUNC $PARAMETERS_QUOTED"
    else
      gf_log_error "\`$COMMAND\` named \`${SUB_COMMAND}\` not found"
    fi
  else
    FORCE_INTERACTIVE=""
    if [ "$COMMAND" = 'interactive' ]; then
      COMMAND="$1"
      FORCE_INTERACTIVE="YES"
      shift
    fi

    PARAMETERS_QUOTED="$(quote_params "$@")"
    INTERACTIVE_FUNC="gf_${COMMAND}"
    NON_INTERACTIVE_FUNC="gf_${COMMAND}_direct"

    if [ -z "$FORCE_INTERACTIVE" ] && type "$NON_INTERACTIVE_FUNC" >/dev/null 2>&1; then
      gf_log_internal "$NON_INTERACTIVE_FUNC" "$@"
      eval "$NON_INTERACTIVE_FUNC $PARAMETERS_QUOTED"
    elif type "$INTERACTIVE_FUNC" >/dev/null 2>&1; then
      gf_log_internal "$INTERACTIVE_FUNC" "$@"
      eval "$INTERACTIVE_FUNC $PARAMETERS_QUOTED"
    else
      gf_log_error "\`$COMMAND\` not found"
    fi
  fi
}

gf_configure() {
  # TODO
  quote_params "$@"
}

git_fuzzy() {
  NON_CONFIG_PARAMS="$(gf_configure "$@")"
  if [ -z "$NON_CONFIG_PARAMS" ]; then
    gf_menu
  else
    # shellcheck disable=2086
    gf_run $NON_CONFIG_PARAMS
  fi
}

if gf_is_in_git_repo; then
  git_fuzzy "$@"
else
  gf_log_error "not in git repo"
  exit 1
fi
