#!/usr/bin/env bash

remote_vimrc() {
  USAGE="Supported options: --fast-term --slow-term --help"

  while [ $# -gt 0 ]; do
    opt="$1"
    case "$1" in
      "--slow-term" )
        OPT_SLOW_TERM="yes"
        ;;
      "--fast-term" )
        OPT_FAST_TERM="yes"
        ;;
      "--help")
        echo >&2 "$USAGE"
        exit 0
        ;;
      *)
        echo >&2 "${RED}${BOLD}ERROR${NORMAL}: Invalid option: '$1'"
        echo >&2 "$USAGE"
        exit 1
        ;;
    esac
    shift
  done

  echo 'vim () {'
    printf '  command vim -u'
      printf ' <(echo'
        printf " '"
          printf ' : set nocompatible'
          printf ' | set hidden'

          printf ' | syntax enable'

          printf ' | set hlsearch'
          printf ' | set ignorecase'
          printf ' | set smartcase'
          printf ' | set infercase'

          printf ' | filetype on'
          printf ' | filetype plugin on'

          if [ -n "$OPT_FAST_TERM" ]; then
            printf ' | set incsearch'
            printf ' | if exists("&inccommand") | set inccommand=split | endif'
          fi

          if [ -z "$OPT_SLOW_TERM" ]; then
            printf ' | set path+=**'
            printf ' | set wildmenu'
            printf ' | set wildmode=list:longest,full'

            printf ' | if exists("&showcommand") | set showcommand | endif'
          fi

          if [ -n "$OPT_FAST_TERM" ]; then
            printf ' | set cursorline'

            printf ' | set ruler'

            printf ' | set showmode'

            printf ' | set relativenumber'
            printf ' | set number'
          fi

          printf ' | set backspace=indent,eol,start'
          printf ' | set autoindent'

          printf ' | set splitbelow'
          printf ' | set splitright'

          printf ' | nmap <silent> <CR> :'

          printf ' | nmap <silent> <Space> <Leader>'

          # Move between windows using <M-H/J/K/L> keys
          printf ' | nmap <silent> <M-h> :wincmd h<CR>'
          printf ' | nmap <silent> <M-j> :wincmd j<CR>'
          printf ' | nmap <silent> <M-k> :wincmd k<CR>'
          printf ' | nmap <silent> <M-l> :wincmd l<CR>'

          # Move between windows using <M-H/J/K/L> keys
          printf ' | imap <silent> <M-h> <Esc>:wincmd h<CR>i'
          printf ' | imap <silent> <M-j> <Esc>:wincmd j<CR>i'
          printf ' | imap <silent> <M-k> <Esc>:wincmd k<CR>i'
          printf ' | imap <silent> <M-l> <Esc>:wincmd l<CR>i'

          # Split windows using <M-S-H/J/K/L> keys
          printf ' | nmap <silent> <M-H> :vsplit<CR>:wincmd h<CR>'
          printf ' | nmap <silent> <M-J> :split<CR>'
          printf ' | nmap <silent> <M-K> :split<CR>:wincmd k<CR>'
          printf ' | nmap <silent> <M-L> :vsplit<CR>'

          # Split windows using <M-S-H/J/K/L> keys
          printf ' | imap <silent> <M-H> <Esc>:vsplit<CR>:wincmd h<CR>i'
          printf ' | imap <silent> <M-J> <Esc>:split<CR>i'
          printf ' | imap <silent> <M-K> <Esc>:split<CR>:wincmd k<CR>i'
          printf ' | imap <silent> <M-L> <Esc>:vsplit<CR>i'

          # Move Buffers
          printf ' | nmap <silent> <C-H> :bfirst!<CR>'
          printf ' | nmap <silent> H :bprevious!<CR>'
          printf ' | nmap <silent> L :bnext!<CR>'
          printf ' | nmap <silent> <C-L> :blast!<CR>'

          # Disable Ex-Mode and map Q to close buffers
          printf ' | nnoremap <silent> Q :q<CR>'
          printf ' | nnoremap <silent> K <Nop>'

          # since we set hlsearch
          printf ' | let @/ = "search_term_placeholder"'

          # Remap Arrow Keys
          printf ' | map <Up> <Nop>'
          printf ' | map <Down> <Nop>'
          printf ' | map <Left> <Nop>'
          printf ' | map <Right> <Nop>'

          # Move in insert mode using <C-H/J/K/L> keys
          printf ' | inoremap <silent> <C-H> <Left>'
          printf ' | inoremap <silent> <C-J> <Down>'
          printf ' | inoremap <silent> <C-K> <Up>'
          printf ' | inoremap <silent> <C-L> <Right>'

          # Up and down are more logical with g..
          printf ' | nnoremap <silent> k gk'
          printf ' | nnoremap <silent> j gj'

          # Alt-Enter or <leader><CR> - insert a new-line here
          printf ' | nnoremap <silent> <leader><CR> i<CR><Esc>'
          printf ' | nnoremap <silent> <M-CR> i<CR><Esc>'

          # Sane Y
          printf ' | nnoremap <silent> Y y$'

          # Use Y to put text into clipboard
          printf ' | vnoremap <silent> Y "+y'

          # Map K to `NoOp`
          printf ' | nnoremap <silent> K <Nop>'

          # Map Q to `NoOp`
          printf ' | nnoremap <silent> K <Nop>'

          # Prevent (mis|slow)-types of below from triggering orignal vim commands
          # NB: Later get re-mapped to using `vim-surround`
          printf ' | nnoremap <silent> s <Nop>'
          printf ' | nnoremap <silent> S <Nop>'

          # `macOS` emulation
          # TODO map <Command-BS> in iTerm/Alacritty
          printf ' | imap <silent> <M-BS> <C-W>'

          # `bash` emulation
          printf ' | imap <silent> <C-A> <Esc>I'
          printf ' | imap <silent> <C-E> <Esc>A'
          printf ' | imap <silent> <C-B> <Esc>bi'
          printf ' | imap <silent> <C-F> <Esc>wi'
        printf "'"
      printf ')'
    printf ' "$@"'
    echo ''
  echo '}'
}

remote_vimrc "$@"
