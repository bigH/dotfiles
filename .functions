#!/usr/bin/env bash

# jj - list autojump directories
if type autojump >/dev/null 2>&1; then
  jj() {
    autojump -s
  }
fi

# portcheck - check if a port is available
portcheck() {
  if [ -z "$1" ]
  then
    echo "ERROR: specify port number."
  else
    re='^[0-9]+$'
    if ! [[ $1 =~ $re ]] ; then
      echo "ERROR: argument must be a port number."
    else
      lsof -n -i4TCP:$1 | grep LISTEN
    fi
  fi
}

# first_line [file]
first_line() {
  head -n 1
}

# last_line [file]
last_line() {
  tail -n 1
}

# lines [from] [to] - for piping only
line() {
  lines $1 $1
}

# line [number] - for piping only
lines() {
  head -n $2 | tail -n +$1
}

# numbers - for piping only
numbers() {
  cat -n -
}

# shuf - for piping only
shuf() {
  perl -MList::Util=shuffle -e 'print shuffle<STDIN>'
}

# every
every () {
  if [ -z "$1" ]; then
    echo 'ERROR: specify the `n` in `nth`.'
    exit 1
  else
    re='^[0-9]+$'
    if ! [[ $1 =~ $re ]] ; then
      echo 'ERROR: argument must be a number.'
      exit 2
    else
      NUM=$1
      shift
      if [ "$#" -eq 0 ]; then
        perl -ne 'print ((0 == $. % '"$NUM"') ? $_ : "")'
      else
        while [ "$#" -ne 0 ]; do
          perl -ne 'print ((0 == $. % '"$NUM"') ? $_ : "")' $1
          shift
        done
      fi
    fi
  fi
}

# a
a() {
  is-in-git-repo && g st || ll
}

# horizontal rule [hr]
hr() {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

# join lines into one, with provided separator character
join-lines() {
  SEP="$1"

  # length includes new-line so off-by-one
  LENGTH_OF_SEP="$(echo "$SEP" | wc -c)"

  if [ $LENGTH_OF_SEP -eq 1 ]; then
    paste -s -d' ' -
  elif [ $LENGTH_OF_SEP -eq 2 ]; then
    paste -s -d"$SEP" -
  else
    paste -s -d"%" - | sed "s/%/$SEP/g"
  fi
}

# `which` with `ls -l $(which)`
wh() {
  if [ -z "$1" ]; then
    echo 'ERROR: specify the command.'
  else
    echo "${MAGENTA}which $1${NORMAL}:"
    which "$1" | indent
    PATH_TO_COMMAND="$(which "$1")"
    if [ -L "$PATH_TO_COMMAND" ]; then
      if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "${GRAY}(using \`readlink-f\` to support OS X)${NORMAL}"
      fi
      echo "${MAGENTA}readlink -f \`which $1\`${NORMAL}:"
      readlink-f "$PATH_TO_COMMAND" | indent
    elif [ -f "$PATH_TO_COMMAND" ]; then
      echo "${MAGENTA}ls -l \`which $1\`${NORMAL}:"
      ls -l "$PATH_TO_COMMAND" | indent
    fi
  fi
}

# status represents if `git` commands will work
is-in-git-repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

