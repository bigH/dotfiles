priority -60

#
# Global functions
#

global !p

import subprocess

def param_list_for_multi_line_sig(arglist, index, snip):
  if arglist[index]:
    paramlist = ''
    first = True
    for arg in str(arglist[index]).split(','):
      if first:
        paramlist = arg.strip() + ': T.untyped'
        first = False
      else:
        paramlist = paramlist + ', ' + arg.strip() + ': T.untyped'
    snip += '  params(' + paramlist + ')'
  else:
    snip += '  '

def param_list_for_single_line_sig(arglist, index, snip):
  if arglist[index]:
    paramlist = ''
    first = True
    for arg in str(arglist[index]).split(','):
      if first:
        paramlist = arg.strip() + ': T.untyped'
        first = False
      else:
        paramlist = paramlist + ', ' + arg.strip() + ': T.untyped'
    snip += 'params(' + paramlist + ')'
  else:
    snip += ''

def write_instance_vars(arglist, snip):
  args = str(arglist).split(',')
  for arg in args:
    name = arg.strip().replace(':', ' ').split(' ', 1)[0]
    if name:
      snip += '  @{} = {}'.format(name, name)
    else:
      snip += ''

endglobal

#
# Snippets
#

snippet pry "require + binding.pry"
require 'pry'; binding.pry
endsnippet

snippet sigd "sig do .."
sig do`!p param_list_for_multi_line_sig(t, 3, snip)`$4
end
def ${1:function_name}${2:(${3:*args})}
  $0
end
endsnippet

snippet sigg "sig {...}"
sig{`!p param_list_for_single_line_sig(t, 3, snip)`}
def ${1:function_name}${2:(${3:*args})}
  $0
end
endsnippet

snippet begin "begin ... rescue ... end"
begin
  $1
rescue
  $0
end
endsnippet

snippet pd "debug with puts"
puts "HIRENDEBUG: ${1:foo} = #{`!p snip.rv = t[1] if t[1] else ""`}"
endsnippet

snippet oldd "debug with Opus::Log.debug"
Opus::Log.debug("HIRENDEBUG: ${1:foo} = #{`!p snip.rv = t[1] if t[1] else ""`}")
endsnippet

snippet olid "debug with Opus::Log.info"
Opus::Log.info("HIRENDEBUG: ${1:foo} = #{`!p snip.rv = t[1] if t[1] else ""`}")
endsnippet

snippet todo "# TODO(...) ...."
# TODO:(hiren,`!v strftime('%Y-%m-%d')`) $0
endsnippet

snippet must "surround with `T.must`"
T.must(${0:${VISUAL:_}})
endsnippet

snippet si "surround with `#{...}`"
#{${0:${VISUAL:_}}}
endsnippet

# vim: set ts=2 sw=2 expandtab:
